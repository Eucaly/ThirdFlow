author: TheDiveO
created: 20140902114846490
description: Third Flow in-TW plugin development process support
list: readme license history
modified: 20140927173947745
plugin-type: plugin
source: http://thediveo.github.io/ThirdFlow
title: $:/plugins/TheDiveO/ThirdFlow
type: application/json
version: 1.0.5-dev-js-support

{"tiddlers":{"$:/plugins/TheDiveO/ThirdFlow/commands/packplugin.js":{"text":"/*\\\ncreated: 20140927171850335\ntitle: $:/plugins/TheDiveO/ThirdFlow/commands/packplugin.js\ntype: application/javascript\nmodified: 20140927172039138\nmodule-type: command\n\nThe packplugin command packages source tiddlers (ordinary\ntiddlers) into a plugin tiddler:\n--packplugin <plugin title>\n\nPlease note that the plugin tiddler must be correctly set\nup in that it is of type \"application/json\" and also\nthe plugin-type is set.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.info = {\n\tname: \"packplugin\",\n\tsynchronous: true\n};\n\nvar Command = function(params,commander) {\n\tthis.params = params;\n\tthis.commander = commander;\n\tthis.logger = new $tw.utils.Logger(\"--\" + exports.info.name);\n};\n\nCommand.prototype.execute = function() {\n\tif(this.params.length < 1) {\n\t\treturn \"Missing plugin title\";\n\t}\n\tvar wiki = this.commander.wiki,\n\t\tself = this,\n\t\tfs = require(\"fs\"),\n\t\tpath = require(\"path\"),\n\t\tpluginTitle = this.params[0],\n\t\tfilter = this.params[1] ||\n\t\t\t\"[prefix[\"+this.params[0]+\"/]]\";\n//\t\t\t\"[field:title/\"+this.params[0].replace(/\\$/g, \"\\\\$\").replace(/\\//g, \"\\\\/\")+\"\\\\//]\";\n\t\t\n\t// Get the plug-in self-description tiddler. If it doesn't exist,\n\t// bail out as the plugin developer needs to provide a plugin tiddler\n\t// with the required self-description.\n\tthis.logger.log(\"making plugin\", pluginTitle);\n\tthis.logger.log(\"using filter for packing\", filter);\n\tvar pluginTiddler = $tw.wiki.getTiddler(pluginTitle);\n\tif (!pluginTiddler) {\n\t\treturn \"missing plugin tiddler: \" + pluginTitle;\n\t}\n\t// Sanity checks first...\n\tif(pluginTiddler.fields.type !== \"application/json\" || !pluginTiddler.hasField(\"plugin-type\")) {\n\t\treturn \"not a plugin skeleton: \" + pluginTitle;\n\t}\n\t// Update the plugin content to contain all the tiddlers that match\n\t// the filter expression.\n\tvar tiddlers = $tw.wiki.filterTiddlers(filter),\n\t    pluginTiddlers = {};\n\t$tw.utils.each(tiddlers, function(title) {\n\t\tvar tiddler = $tw.wiki.getTiddler(title),\n\t\t    fields = {};\n\t\tself.logger.log(\"adding \" + title);\n\t\t$tw.utils.each(tiddler.fields, function(value, name) {\n\t\t\tfields[name] = tiddler.getFieldString(name);\n\t\t});\n\t\tpluginTiddlers[title] = fields;\n\t});\n\tthis.logger.log(\"packed\", tiddlers.length, \"tiddlers\");\n\tvar plugin = new $tw.Tiddler(pluginTiddler, { text: JSON.stringify({tiddlers: pluginTiddlers}) });\n\t$tw.wiki.addTiddler(plugin);\n\t// We need to update the plugin info that TW had built up during boot...\n\t$tw.wiki.readPluginInfo();\n\t// ...and we need to re-unpack the plugins into their shadow tiddlers in\n\t// order to make [is[shadow]] work correctly.\n\t$tw.wiki.unpackPluginTiddlers();\n\t\n\treturn null; // done & okay\n};\n\nexports.Command = Command;\n\n})();\n","created":"20140927171850335","title":"$:/plugins/TheDiveO/ThirdFlow/commands/packplugin.js","type":"application/javascript","modified":"20140927172039138","module-type":"command"},"$:/plugins/TheDiveO/ThirdFlow/commands/rendertemplatedtiddler.js":{"text":"/*\\\ncreated: 20140927173011680\ntitle: $:/plugins/TheDiveO/ThirdFlow/commands/rendertemplatedtiddler.js\ntype: application/javascript\nmodified: 20140927173032181\nmodule-type: command\n\nCommand to render a single tiddler using a template.\n--rendertemplatedtiddler <title> <template> <file>\n\nCommand to render a single tiddler using a template to a specific file.\nIn comparism to --rendertiddler this command variant accepts a template\nbut only works on a single tiddler. This allows us to avoid having specific\ntemplate tiddlers including the filter set.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar widget = require(\"$:/core/modules/widgets/widget.js\");\n\nexports.info = {\n\tname: \"rendertemplatedtiddler\",\n\tsynchronous: true\n};\n\nvar Command = function(params,commander) {\n\tthis.params = params;\n\tthis.commander = commander;\n    this.logger = new $tw.utils.Logger(\"--\" + exports.info.name);\n};\n\nCommand.prototype.execute = function() {\n\tif(this.params.length < 3) {\n\t\treturn \"Missing template or filename\";\n\t}\n\tvar self = this,\n\t\tfs = require(\"fs\"),\n\t\tpath = require(\"path\"),\n\t\twiki = this.commander.wiki,\n\t\ttitle = this.params[0],\n\t\ttemplate = this.params[1],\n\t\tfilename = path.resolve(this.commander.outputPath,this.params[2]);\n\t$tw.utils.createFileDirectories(filename);\n\t// Save the tiddler as a self contained templated file\n\tvar content = wiki.renderTiddler(\"text/plain\",template,{variables: {currentTiddler: title}});\n\tfs.writeFileSync(filename,content,{encoding: \"utf8\"});\n    this.logger.log(\"rendered tiddler\", title, \"to\", filename);\n\n\treturn null; // done fine\n};\n\nexports.Command = Command;\n\n})();","created":"20140927173011680","title":"$:/plugins/TheDiveO/ThirdFlow/commands/rendertemplatedtiddler.js","type":"application/javascript","modified":"20140927173032181","module-type":"command"},"$:/plugins/TheDiveO/ThirdFlow/filters/is/shadowinsync.js":{"text":"/*\\\ncreated: 20140927173349128\ntitle: $:/plugins/TheDiveO/ThirdFlow/filters/is/shadowinsync.js\ntype: application/javascript\nmodified: 20140927173409192\nmodule-type: isfilteroperator\n\nFilter function for [is[shadowinsync]]\n  a tiddler is shadowsynced when an ordinary tiddler also has\n  a shadow tiddler *AND* the shadow tiddler is the same as the\n  real tiddler. This is decided on the basis of type, and the\n  creation and modification dates.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nExport our filter function\n*/\nexports.shadowinsync = function(source,prefix,options) {\n\tvar results = [];\n\tvar invert = prefix === \"!\";\n\tsource(function(tiddler,title) {\n\t\tvar match = invert;\n\t\tvar pluginTitle = options.wiki.getShadowSource(title);\n\t\tif(pluginTitle) {\n\t\t\tvar pluginInfo = options.wiki.getPluginInfo(pluginTitle),\n\t\t\t\tshadow = pluginInfo.tiddlers[title];\n\t\t\tif ( (tiddler.fields.type == shadow.type)\n\t\t\t     && (tiddler.getFieldString(\"created\") === shadow.created)\n\t\t\t\t && (tiddler.getFieldString(\"modified\") === shadow.modified) ) {\n\t\t\t\tmatch = !match;\n\t\t\t}\n\t\t}\n\t\tif ( match ) {\n\t\t\tresults.push(title);\n\t\t}\n\t});\n\treturn results;\n};\n\n})();\n","created":"20140927173349128","title":"$:/plugins/TheDiveO/ThirdFlow/filters/is/shadowinsync.js","type":"application/javascript","modified":"20140927173409192","module-type":"isfilteroperator"},"$:/plugins/TheDiveO/ThirdFlow/history":{"created":"20140902083720188","modified":"20140926170600649","title":"$:/plugins/TheDiveO/ThirdFlow/history","type":"text/vnd.tiddlywiki","text":"* ''1.0.4'' -- fix and more documentation.\n** fixed a typo in the (empty) source plugin tiddler itself which caused hiccups in ~TiddlyWiki's control panel plugin tab.\n** added more background information about plugins, modules, and the crazy stuff the //Third Flow// plugin is made of. \n* ''1.0.3'' -- upgraded to work with the final ~TiddlyWiki 5.1.x releases.\n** fixed using deprecated regular expression when packing plugin tiddlers.\n* ''1.0.2'' -- fix and polishing release.\n** fixes a problem in the hierarchical filesystem sync adaptor that previously caused server aborts when adding JPEG tiddlers. The sync adaptor now defaults to the \"~~binary~~base64\" encoding whenever a meta file is required.\n** added two illustrations to the demo documentation showing the develop and release phases.\n** further minor documentation fixes and improvements.\n* ''1.0.1'' -- fix and polishing release.\n** fixes an issue where the user plugin demonstration wikis contained still the plugin source in addition to the plugin itself.\n** included polishing documentation from pmario (thanks!).\n* ''1.0.0'' -- this marks the first public release of the //Third Flow// plugin. Of course, the //Third Flow// eats its own dog food: this plugin has been developed with itself. Sweet, isn't it?\n** the ``--makeplugin`` command for creating plugins in headless TW5 instances running under Node.js.\n** the ``hierarchicalfilesystemadaptor`` sync adapter that stores tiddlers according to their hierarchical names into folders and subfolders.\n"},"$:/plugins/TheDiveO/ThirdFlow/icon":{"created":"20140902083115519","modified":"20140902083155746","title":"$:/plugins/TheDiveO/ThirdFlow/icon","type":"text/vnd.tiddlywiki","text":"<svg width=\"22pt\" height=\"22pt\" viewBox=\"0 0 128 128\">\n    <g fill-rule=\"evenodd\">\n    <path\n       d=\"M 13.6875,0.21875 1.96875,7 l 0,13.53125 11.71875,6.78125 11.75,-6.78125 0,-13.53125 -11.75,-6.78125 z m -0.21875,2.9375 -0.21875,0.3125 -0.1875,0.21875 0.1875,0.25 0.15625,0.25 C 8.2238491,4.3516565 4.0625,8.5897663 4.0625,13.8125 c 0,1.53048 0.3643003,2.966927 1,4.25 l -0.25,0.53125 -0.625,-0.0625 C 3.4739437,17.106473 3.0625,15.512243 3.0625,13.8125 3.0625,8.028588 7.716283,3.2895221 13.46875,3.15625 z M 14.4375,3.1875 c 5.534617,0.369785 9.90625,4.9983374 9.90625,10.625 0,1.833581 -0.463357,3.557017 -1.28125,5.0625 l -0.125,-0.25 -0.125,-0.28125 -0.28125,0.03125 -0.34375,0.03125 c 0.739688,-1.363949 1.15625,-2.929057 1.15625,-4.59375 0,-5.0803341 -3.922604,-9.2511654 -8.90625,-9.625 l -0.375,-0.5 0.375,-0.5 z M 10.25,7.5 c 1.425042,0 2.639576,0.7576324 3.8125,1.40625 1.172923,0.6486176 2.283798,1.21875 3.09375,1.21875 C 19.100721,10.125 20,9.09375 20,9.09375 L 21.25,10.25 c 0,0 -1.500142,1.5625 -4.09375,1.5625 -1.459089,0 -2.728987,-0.755233 -3.90625,-1.40625 -1.177263,-0.6510172 -2.253123,-1.1875 -3,-1.1875 -1.8328368,0 -2.875,1.03125 -2.875,1.03125 L 6.1875,9.0625 c 0,0 1.5514984,-1.5625 4.0625,-1.5625 z m 0.0625,4.6875 c 1.28542,0 2.513683,0.725888 3.6875,1.375 1.173817,0.649112 2.306403,1.21875 3.25,1.21875 2.078117,0 3.09375,-1.125 3.09375,-1.125 l 0.71875,0.65625 c 0,0 -1.352537,1.46875 -3.8125,1.46875 -1.325443,0 -2.573631,-0.724477 -3.75,-1.375 -1.176369,-0.650523 -2.301,-1.21875 -3.1875,-1.21875 -1.9724586,0 -3.09375,1.15625 -3.09375,1.15625 L 6.5,13.625 c 0,0 1.4411209,-1.4375 3.8125,-1.4375 z m 0,3.84375 c 1.28542,0 2.482432,0.694638 3.65625,1.34375 1.173817,0.649112 2.306403,1.25 3.25,1.25 2.078118,0 3.09375,-1.15625 3.09375,-1.15625 l 0.75,0.6875 c 0,0 -1.383787,1.46875 -3.84375,1.46875 -1.325443,0 -2.54238,-0.724477 -3.71875,-1.375 -1.176369,-0.650523 -2.301001,-1.21875 -3.1875,-1.21875 -1.9724586,0 -3.125,1.125 -3.125,1.125 L 6.5,17.46875 c 0,0 1.4411209,-1.4375 3.8125,-1.4375 z M 5.53125,18.875 c 1.7052086,2.730869 4.727356,4.5625 8.1875,4.5625 3.288587,0 6.171115,-1.649342 7.90625,-4.15625 l 0.6875,-0.09375 0.25,0.53125 c -1.906345,2.846287 -5.161209,4.71875 -8.84375,4.71875 -3.8226661,0 -7.1815039,-2.032459 -9.0625,-5.0625 L 5,19.40625 5.3125,19.4375 5.40625,19.15625 5.53125,18.875 z\"\n       transform=\"scale(4.6545455,4.6545455)\"\n       id=\"path4245\"\n       style=\"fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.80000001;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate\" />\n    </g>\n</svg>"},"$:/plugins/TheDiveO/ThirdFlow/license":{"created":"20140902084022063","modified":"20140902090843205","title":"$:/plugins/TheDiveO/ThirdFlow/license","type":"text/vnd.tiddlywiki","text":"The //Third Flow// plugin is covered by the following licenses:\n\n* The ''Third Flow plugin'' is licensed under the [[MIT license|http://opensource.org/licenses/MIT]].\n* The ''hierarchical file system adapter'' is licensed under the [[TiddlyWiki 5 license|https://raw.githubusercontent.com/Jermolene/TiddlyWiki5/master/licenses/copyright.md]] (links to ~GitHub TW5 repository). It bases on ``plugins/tiddlywiki/filesystem/filesystemadaptor.js`` and brings in storing tiddlers into hierarchical folder structures according to their titles.\n* Other content of this ~TiddlyWiki which is not part of the plugin or ~TiddlyWiki 5 is covered by the [[CC BY 3.0|http://creativecommons.org/licenses/by/3.0/]] license."},"$:/plugins/TheDiveO/ThirdFlow/readme":{"created":"20140902083641711","modified":"20140902130540097","title":"$:/plugins/TheDiveO/ThirdFlow/readme","type":"text/vnd.tiddlywiki","text":"Use the //Third Flow// plugin in your Node.js-based ~TiddlyWikis to develop your customization plugins inside ~TiddlyWiki but with support for well-structured source code repository layouts.\n\nThe //Third Flow// plugin supports your plugin development in that it organizes all your tiddler source files into a clear hierarchical folder structure based on tiddler titles. An additional plugin creation command module makes it easy to create the package plugin itself as well as a demonstration ~TiddlyWiki without the hassle of having to maintain separate and even multiple ``tiddlers/`` and ``plugin/`` folders. Also, the //Third Flow// relieves you from shuffling tiddler source code files around in your source code repository.\n\nThere's only a ''single'' tiddler source code tree and it is synchronized to your tiddler's title-based structure. Thus, no more need for external editing sessions and source file shuffling.\n\nSimply install this plugin into your ~TiddlyWiki in which you are developing your customizations. For more information, please go to the [[Third Flow project website|http://thediveo.github.io/ThirdFlow]].\n\nEnjoy the //Third Flow//!"},"$:/plugins/TheDiveO/ThirdFlow/syncadapters/hierarchicalfilesystemadaptor.js":{"text":"/*\\\ncreated: 20140927173102413\ntitle: $:/plugins/TheDiveO/ThirdFlow/syncadapters/hierarchicalfilesystemadaptor.js\ntype: application/javascript\nmodified: 20140927173109772\nmodule-type: syncadaptor\n\nA sync adaptor module for synchronising with the local filesystem via node.js APIs\n...in contrast to filesystemadaptor.js this variant understands forward slashes \"/\"\nin tiddler titles and stores tiddlers appropriately in the file system by mapping\nthe hierarchy in the title to a (sub) directory structure.\n\nIn addition, this sync adaptor understands the concept of system tiddlers (starting\ntheir titles with \"$:/\") and stores them inside a \"special\" system branch.\n\nMoreover, this sync adaptor also understands the concept of draft tiddlers (based\non the presence of the \"draft.of\" field) and stores all draft tiddlers in a flat\nsingle \".draft\" folder. The makes cleanup and (git) repository syncing easier to do.\n\nThe code for this sync adaptor comes from filesystemadaptor.js and has been enhanced\nto support hierarchical tiddler storage and javascript tiddlers.\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n// Get a reference to the file system\nvar fs = !$tw.browser ? require(\"fs\") : null,\n\tpath = !$tw.browser ? require(\"path\") : null;\n\nfunction HierarchicalFileSystemAdaptor(options) {\n\tvar self = this;\n\tthis.wiki = options.wiki;\n\tthis.watchers = {};\n\tthis.pending = {};\n\tthis.logger = new $tw.utils.Logger(\"HierarchicalFileSystem\");\n\tthis.setwatcher = function(filename, title) {\n\t\treturn undefined;\n\t\treturn this.watchers[filename] = this.watchers[filename] ||\n\t\t\tfs.watch(filename, {persistent: false}, function(e) {\n\t\t\t\tself.logger.log(\"Error:\",e,filename);\n\t\t\t\tif(e === \"change\") {\n\t\t\t\t\tvar tiddlers = $tw.loadTiddlersFromFile(filename).tiddlers;\n\t\t\t\t\tfor(var t in tiddlers) {\n\t\t\t\t\t\tif(tiddlers[t].title) {\n\t\t\t\t\t\t\tself.wiki.addTiddler(tiddlers[t]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tfor(var f in $tw.boot.files) {\n\t\tvar fileInfo = $tw.boot.files[f];\n\t\tthis.setwatcher(fileInfo.filepath, f);\n\t}\n\t// Create the <wiki>/tiddlers folder if it doesn't exist\n\t// TODO: we should create the path recursively\n\tif(!fs.existsSync($tw.boot.wikiTiddlersPath)) {\n\t\tfs.mkdirSync($tw.boot.wikiTiddlersPath);\n\t}\n\t\n\tthis.config = {\n\t\tdisabled: false\n\t};\n\t\n\tif($tw.boot.wikiInfo.config[\"disable-hfs\"]) {\n\t\tthis.config.disabled = true;\n\t\tthis.logger.log(\"plugin disabled; no saving and deleting\");\n\t}\n}\n\n// TODO: may we have modularized plugin config options in the boot kernel?\n// The file system folder immediately below the <wiki>/tiddlers root used\n// to store system tiddlers that have titles starting with \"$:/\". Default\n// is \"system\" (please note: no trailing separator slash!).\nHierarchicalFileSystemAdaptor.prototype.SYSTEM_FOLDER = \"system\";\n// The draft folder immediately below the <wiki>/tiddlers root used\n// to store system tiddlers that have their draft.of field set. Default\n// is \".drafts\" (please note: no trailing separator slash!).\nHierarchicalFileSystemAdaptor.prototype.DRAFT_FOLDER = \".drafts\";\n\nHierarchicalFileSystemAdaptor.prototype.getTiddlerInfo = function(tiddler) {\n\treturn {};\n};\n\n// Nota Bene: this needs to mirror the file extension information as established\n// in function $tw.boot.startup (boot.js). Otherwise, the sync adaptor will use\n// another encoding than expected by the boot process.\n$tw.config.typeInfo = {\n\t\"text/vnd.tiddlywiki\": {\n\t\tfileType: \"application/x-tiddler\",\n\t\textension: \".tid\"\n\t},\n\t\"image/jpeg\" : {\n\t\thasMetaFile: true,\n\t\tencoding: \"base64\"\n\t},\n\t\"image/png\" : {\n\t\thasMetaFile: true,\n\t\tencoding: \"base64\"\n\t},\n\t\"application/javascript\": {\n\t\tfileType: \"application/javascript\",\n\t\textension: \"\"\n\t}\n};\n\n$tw.config.typeTemplates = {\n\t\"application/x-tiddler\": \"$:/core/templates/tid-tiddler\",\n\t\"application/javascript\": \"$:/plugins/TheDiveO/ThirdFlow/templates/javascript-tiddler\"\n};\n\n// mkdirp as in \"mkdir -p\" ;)\n// Ensures that all subdirectories are created along the path, as necessary.\n// Fully asynchronous operation. \nHierarchicalFileSystemAdaptor.prototype.mkdirp = function(dir, callback) {\n\tvar mkdirf = function(dir, callback) {\n\t\t// head recursion: try to create the directory specified and\n\t\t// see what happens. If it exists, then fine and we're done. If\n\t\t// it doesn't exist, then go up one directory level in the directory\n\t\t// path and recurse down in trying to create the parent directory.\n\t\tfs.mkdir(dir, function(err) {\n\t\t\tif(!err || err.code === \"EEXIST\") {\n\t\t\t\t// either we succeeded or the directory already existed,\n\t\t\t\t// so we're done here. We don't see this as an error,\n\t\t\t\t// it's just fine.\n\t\t\t\treturn callback(null);\n\t\t\t}\n\t\t\tif(err.code !== \"ENOENT\") {\n\t\t\t\t// signal all other errors when trying to create the\n\t\t\t\t// directory directly to the callback. Typically, we\n\t\t\t\t// will unwind here up to the original caller.\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\t// So we're stuck with ENOENT ... that means that one or more\n\t\t\t// parent directories are still missing. We now need to recurse\n\t\t\t// by going up the directory path elements; but not beyond the\n\t\t\t// beginning.\n\t\t\tvar parent = path.dirname(dir);\n\t\t\tif(parent === dir) {\n\t\t\t\t// when we've hit the root ENOENT then actually is\n\t\t\t\t// an error and we thus report it back.\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tmkdirf(parent, function(err) {\n\t\t\t\t// tail fixup: parent directories should now have been\n\t\t\t\t// created in case they didn't exist before. But beware\n\t\t\t\t// of other errors, as usual ... bail out if we couldn't\n\t\t\t\t// create the required parent directories.\n\t\t\t\tif(err && err.code !== \"EEXIST\") {\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\t// Finally: we try to create this particular directory\n\t\t\t\t// and notify the caller that we're done one way or\n\t\t\t\t// the other...\n\t\t\t\tfs.mkdir(dir, function(err) {\n\t\t\t\t\tif (err && err.code !== \"EEXIST\") {\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\t\t\t\t\treturn callback(null);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n\t// get the whole shebang rolling...\n\tmkdirf(path.resolve(dir), callback);\n};\n\nHierarchicalFileSystemAdaptor.prototype.getTiddlerFileInfo = function(tiddler,callback) {\n\t// See if we've already got information about this file\n\tvar self = this,\n\t\ttitle = tiddler.fields.title,\n\t\tfileInfo = $tw.boot.files[title],\n\t\tdraftOf = tiddler.fields[\"draft.of\"];\n\t// Get information about how to save tiddlers of this type\n\tvar type = tiddler.fields.type || \"text/vnd.tiddlywiki\",\n\t\ttypeInfo = $tw.config.typeInfo[type];\n\tif(!typeInfo) {\n\t\ttypeInfo = $tw.config.typeInfo[\"text/vnd.tiddlywiki\"];\n\t}\n\tvar extension = typeInfo.extension || \"\";\n\tif(!fileInfo) {\n\t\t// If not, we'll need to generate it\n\t\t// Start by getting a list of the existing files in the directory\n\t\tfs.readdir($tw.boot.wikiTiddlersPath,function(err,files) {\n\t\t\tif(err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\t// Assemble the new fileInfo\n\t\t\tfileInfo = {};\n\t\t\tfileInfo.filepath = $tw.boot.wikiTiddlersPath + path.sep + self.generateTiddlerFilename(title,draftOf,extension,files);\n\t\t\tfileInfo.type = typeInfo.fileType || tiddler.fields.type;\n\t\t\tfileInfo.hasMetaFile = typeInfo.hasMetaFile;\n\t\t\t// Save the newly created fileInfo\n\t\t\t$tw.boot.files[title] = fileInfo;\n\t\t\tself.pending[fileInfo.filepath] = title;\n\t\t\t// Pass it to the callback\n\t\t\tcallback(null,fileInfo);\n\t\t});\n\t} else {\n\t\t// Otherwise just invoke the callback\n\t\tcallback(null,fileInfo);\n\t}\n};\n\n/*\nGiven a tiddler title and an array of existing filenames, generate a new legal filename for the title, case insensitively avoiding the array of existing filenames\n*/\nHierarchicalFileSystemAdaptor.prototype.generateTiddlerFilename = function(title,draftOf,extension,existingFilenames) {\n\t// First remove any of the characters that are illegal in Windows filenames\n\t//var baseFilename = title.replace(/\\<|\\>|\\:|\\\"|\\/|\\\\|\\||\\?|\\*|\\^/g,\"_\");\n\t// Derive a hierarchical filename that is compatible with file system\n\t// naming conventions.\n\tvar baseFilename;\n\tif(!draftOf) {\n\t\t// For non-draft tiddlers now use the hierarchical file system storage\n\t\tbaseFilename = title.replace(/^\\$:\\//, HierarchicalFileSystemAdaptor.prototype.SYSTEM_FOLDER + \"/\");\n\t\tbaseFilename = baseFilename.replace(/\\<|\\>|\\:|\\\"|\\\\|\\||\\?|\\*|\\^/g,\"_\");\n\t} else {\n\t\t// Draft tiddlers go into their own flat drafts folder...\t\n\t\tbaseFilename = HierarchicalFileSystemAdaptor.prototype.DRAFT_FOLDER + \"/\";\n\t\tbaseFilename += title.replace(/\\<|\\>|\\:|\\\"|\\/|\\\\|\\||\\?|\\*|\\^/g,\"_\");\n\t}\n\t// Finally ensure that all slashes get converted into the appropriate\n\t// platform-specific path separator.\n\tbaseFilename = baseFilename.replace(/\\//g, path.sep);\n\t\n\t// Truncate the filename if it is too long\n\tif(baseFilename.length > 200) {\n\t\tbaseFilename = baseFilename.substr(0,200);\n\t}\n\t// Start with the base filename plus the extension\n\tvar filename = baseFilename + extension,\n\t\tcount = 1;\n\t// Add a discriminator if we're clashing with an existing filename\n\twhile(existingFilenames.indexOf(filename) !== -1) {\n\t\tfilename = baseFilename + \" \" + (count++) + extension;\n\t}\n\treturn filename;\n};\n\n/*\nSave a tiddler and invoke the callback with (err,adaptorInfo,revision)\n*/\nHierarchicalFileSystemAdaptor.prototype.saveTiddler = function(tiddler,callback) {\n\tif(this.config.disabled) {\n\t\tthis.logger.log(\"saving disabled\");\n\t\treturn callback(null, {}, 0);\n\t}\n\t\n\tvar self = this;\n\tthis.getTiddlerFileInfo(tiddler,function(err,fileInfo) {\n\t\tvar template, content, encoding;\n\t\tfunction _finish() {\n\t\t\tif(self.pending[fileInfo.filepath]) {\n\t\t\t\tself.setwatcher(fileInfo.filepath, tiddler.fields.title);\n\t\t\t\tdelete self.pending[fileInfo.filepath];\n\t\t\t}\n\t\t\tcallback(null, {}, 0);\n\t\t}\n\t\tif(err) {\n\t\t\treturn callback(err);\n\t\t}\n\t\tif(self.watchers[fileInfo.filepath]) {\n\t\t\tself.watchers[fileInfo.filepath].close();\n\t\t\tdelete self.watchers[fileInfo.filepath];\n\t\t\tself.pending[fileInfo.filepath] = tiddler.fields.title;\n\t\t}\n\t\t// ensure that the required sub directory is present. Then try to\n\t\t// save the tiddler to its file or only its metadata to a separate\n\t\t// metadata file.\n\t\tself.mkdirp(path.dirname(fileInfo.filepath), function(err) {\n\t\t\tif(err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tif(fileInfo.hasMetaFile) {\n\t\t\t\t// Save the tiddler as a separate body and meta file\n\t\t\t\tvar typeInfo = $tw.config.typeInfo[fileInfo.type],\n\t\t\t\t    encoding = typeInfo.encoding || \"base64\"; // makes sense for TW\n\t\t\t\tself.logger.log(\"saving type\", fileInfo.type, \"with meta file and encoding\", encoding);\n\t\t\t\tfs.writeFile(fileInfo.filepath,tiddler.fields.text,{encoding: encoding},function(err) {\n\t\t\t\t\tif(err) {\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\t\t\t\t\tcontent = self.wiki.renderTiddler(\"text/plain\",\"$:/core/templates/tiddler-metadata\",{variables: {currentTiddler: tiddler.fields.title}});\n\t\t\t\t\tfs.writeFile(fileInfo.filepath + \".meta\",content,{encoding: \"utf8\"},function (err) {\n\t\t\t\t\t\tif(err) {\n\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.logger.log(\"Saved file\",fileInfo.filepath);\n\t\t\t\t\t\t_finish();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Save the tiddler as a self contained templated file\n\t\t\t\ttemplate = $tw.config.typeTemplates[fileInfo.type];\n\t\t\t\tcontent = self.wiki.renderTiddler(\"text/plain\",template,{variables: {currentTiddler: tiddler.fields.title}});\n\t\t\t\tfs.writeFile(fileInfo.filepath,content,{encoding: \"utf8\"},function (err) {\n\t\t\t\t\tif(err) {\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\t\t\t\t\tself.logger.log(\"Saved file\",fileInfo.filepath);\n\t\t\t\t\t_finish();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n};\n\n/*\nLoad a tiddler and invoke the callback with (err,tiddlerFields)\n\nWe don't need to implement loading for the file system adaptor, because all the tiddler files will have been loaded during the boot process.\n*/\nHierarchicalFileSystemAdaptor.prototype.loadTiddler = function(title,callback) {\n\tcallback(null,null);\n};\n\n/*\nDelete a tiddler and invoke the callback with (err)\n*/\nHierarchicalFileSystemAdaptor.prototype.deleteTiddler = function(title,callback,options) {\n\tif(this.config.disabled) {\n\t\tthis.logger.log(\"deleting disabled\");\n\t\treturn callback(null);\n\t}\n\n\tvar self = this,\n\t\tfileInfo = $tw.boot.files[title];\n\t// Only delete the tiddler if we have writable information for the file\n\tif(fileInfo) {\n\t\tif(this.watchers[fileInfo.filepath]) {\n\t\t\tthis.watchers[fileInfo.filepath].close();\n\t\t\tdelete this.watchers[fileInfo.filepath];\n\t\t}\n\t\tdelete this.pending[fileInfo.filepath];\n\t\t// Delete the file\n\t\tfs.unlink(fileInfo.filepath,function(err) {\n\t\t\tif(err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tself.logger.log(\"Deleted file\",fileInfo.filepath);\n\t\t\t// Delete the metafile if present\n\t\t\tif(fileInfo.hasMetaFile) {\n\t\t\t\tfs.unlink(fileInfo.filepath + \".meta\",function(err) {\n\t\t\t\t\tif(err) {\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\t\t\t\t\tcallback(null);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcallback(null);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tcallback(null);\n\t}\n};\n\nif(fs) {\n\texports.adaptorClass = HierarchicalFileSystemAdaptor;\n}\n\n})();\n","created":"20140927173102413","title":"$:/plugins/TheDiveO/ThirdFlow/syncadapters/hierarchicalfilesystemadaptor.js","type":"application/javascript","modified":"20140927173109772","module-type":"syncadaptor"},"$:/plugins/TheDiveO/ThirdFlow/templates/javascript-tiddler":{"created":"20140927173431490","modified":"20140927173434365","title":"$:/plugins/TheDiveO/ThirdFlow/templates/javascript-tiddler","type":"text/vnd.tiddlywiki","text":"<$metafy/>"},"$:/plugins/TheDiveO/ThirdFlow/templates/save-all-wo-plugin-sources":{"created":"20140902113827798","modified":"20140927173615299","title":"$:/plugins/TheDiveO/ThirdFlow/templates/save-all-wo-plugin-sources","type":"text/vnd.tiddlywiki","text":"\\define saveTiddlerFilter()\n[is[tiddler]] -[prefix[$:/state/popup/]] -[[$:/HistoryList]] -[[$:/boot/boot.css]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] -[prefix[$:/temp/]] -[is[shadowinsync]] -[[$:/plugins/TheDiveO/ThirdFlow/readme]is[shadow]!is[tiddler]removesuffix[/readme]] -[prefix[$:/plugins/TheDiveO/BrokenPlugin]] +[sort[title]]\n\\end\n{{$:/core/templates/tiddlywiki5.html}}\n"},"$:/plugins/TheDiveO/ThirdFlow/widgets/metafy.js":{"text":"/*\\\ncreated: 20140927173129833\ntitle: $:/plugins/TheDiveO/ThirdFlow/widgets/metafy.js\ntype: application/javascript\nmodified: 20140927173153432\nmodule-type: widget\n\nmetafy widget\n\nUsed to dump javascript tiddlers correctly as .js files as opposed to .js.tid\nfiles.\n\nwidget attributes:\n* tiddler: defaults to the widget variable currentTiddler.\n* detect: regular expression detecting a meta data section (which may be\n    empty). Its parameter #2 indicates where to replace/insert meta data\n    when such a section is present. Otherwise, the template parameter will\n    be used instead. For instance, the following regular expression composed\n    of these elements:\n      \"(^\\/\\*\\\\(?:\\r?\\n))\"\n        -- the special comment marker at the section beginning on its own line.\n      \"((?:^[^\\r\\n]+(?:\\r?\\n))*)\"\n        -- matches all meta data field lines.\n      \"(?:(?:^[^\\r\\n]*(?:\\r?\\n))*)\"\n        -- matches a trailing normal comment text.\n      \"(?:^\\\\\\*\\/(?:\\r?\\n)?)\"\n        -- the special comment marker at the section end on its own line.\n* exclude: the fields to exclude; defaults to \"text bag revision\".\n* template: template to use to establish meta data section if not yet present.\n    $fields$ is used to indicate where to insert the fields (meta) data section of\n    \"field: value\\n\" pairs. For instance, \"/*\\\\\\n$fields$\\\\*\"+\"/\\n\"\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\n/*\nConstructor\n */\nvar MetafyWidget = function(parseTreeNode, options) {\n\tthis.initialise(parseTreeNode, options);\n};\n\n/*\nInherit from the base widget class\n*/\nMetafyWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nMetafyWidget.prototype.render = function(parent, nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\tvar textNode = this.document.createTextNode(this.text);\n\tparent.insertBefore(textNode, nextSibling);\n\tthis.domNodes.push(textNode);\n};\n\n/*\nCompute the internal state of the widget\n*/\nMetafyWidget.prototype.execute = function() {\n\t// Get parameters from our attributes\n\tthis.metafyTitle = this.getAttribute(\"tiddler\", this.getVariable(\"currentTiddler\"));\n\tthis.metafyDetect = this.getAttribute(\"match\",\n\t\t  \"(^\\\\/\\\\*\\\\\\\\(?:\\\\r?\\\\n))\" // special comment marker beginning\n\t\t+ \"((?:^[^\\\\r\\\\n]+(?:\\\\r?\\\\n))*)\" // field name-value pairs\n\t\t+ \"(?:(?:^[^\\\\r\\\\n]*(?:\\\\r?\\\\n))*)\" // remaining comment section\n\t\t+ \"(?:^\\\\\\\\\\\\*\\\\/(?:\\\\r?\\\\n)?)\" // special comment marker end\n\t);\n\tvar exclude = this.getAttribute(\"exclude\", \"text bag revision\");\n\texclude = exclude.split(\" \");\n\tthis.metafyExclude = exclude;\n\tthis.metafyTemplate = this.getAttribute(\"template\", \"/*\\\\\\n$fields$\\\\*/\\n\");\n\t\n\tvar tiddler = this.wiki.getTiddler(this.metafyTitle);\n\tvar text = \"\";\n\tif (tiddler) {\n\t\ttext = this.wiki.getTiddlerText(this.metafyTitle);\n\t}\n\t\n\tvar fields = \"\";\n\tfor(var field in tiddler.fields) {\n\t\tif (exclude.indexOf(field) === -1) {\n\t\t\tfields += field + \": \" + tiddler.getFieldString(field) + \"\\n\";\n\t\t}\n\t}\n\t\n\tvar match = new RegExp(this.metafyDetect, \"mg\").exec(text);\n\tif (match) {\n\t\tvar start = match.index + match[1].length;\n\t\ttext = text.substr(0, start) + fields + text.substr(start + match[2].length);\n\t} else {\n\t\tconsole.log(\"no match\");\n\t\ttext = this.metafyTemplate.replace(\"$fields$\", fields) + text;\n\t}\n\t\n\tthis.text = text;\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nMetafyWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes.tiddler || changedAttributes.detect || changedAttributes.exclude || changedAttributes.template || changedTiddlers[this.viewTitle]) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\n/*\nExport the metafy widget\n */\nexports.metafy = MetafyWidget;\n\n})();\n","created":"20140927173129833","title":"$:/plugins/TheDiveO/ThirdFlow/widgets/metafy.js","type":"application/javascript","modified":"20140927173153432","module-type":"widget"}}}